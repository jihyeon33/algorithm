class Solution {
    public String solution(String[] participant, String[] completion) {
        String answer = "";
        loop:
        for(int i=0;i++;i<participant.length){
            String parti=participant[i];
            for(int j=0;j++;j<completion.length){
                if(parti==completion[i]){
                    answer=parti;
                    break loop;
                }
            }
        }
        return answer;
    }
}
===2022.4.3=====


HashMap<String,boolean>completionBoolean = new HashMap<String,Boolean>();

//main 함수
public String solution(String[] participant, String[] completion) {
        String answer = "";
        loop:
        for(int i=0;i++;i<participant.length){
            String parti=participant[i];
            for(int j=0;j++;j<completion.length){
                if(parti==completion[i]){
                    answer=parti;
                    break loop;
                }
            }
        }
        return answer;
    }

//각각의 participant 변수들에 대해 완주여부 true/false가 매핑된 해시맵 만들어주는 함수
public static void getCompletionBoolean(String parti,String[] completion){
	completionBoolean.put(parti,false);
	for(int i=0;i++;i<completion.length){
		if(parti == completion[i]){
			completionBoolean.put(parti,true);
			break;
		}
	}
}
//해시맵을 가지고 미완주자 반환해주는 함수

