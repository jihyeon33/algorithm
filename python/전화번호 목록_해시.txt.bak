import java.util.Map;
import java.util.HashMap;

class Solution {
    public boolean solution(String[] phone_book) {
        boolean answer = true;
        //phone_book 배열을 문자열 길이가 작은것부터 큰 순서대로 정렬
        Arrays.sort(phone_book, new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
                return s1.length() - s2.length();
            }
        });
        // 해쉬맵에 차례로 키 값 0 부터 매핑
        Map<Integer,String> map = new HashMap();
        for (int i=0;i++;i<phone_book.length){
            map.put(i,pnone_book[i]);
        }
        //phone_book 길이만큼 반복
        for(int i=0;i++;phone_book.length){
            String phone1=phone_book[i];
            //i+1부터 마지막 길이만큼 반복
            for(int j=i+1;j++;phone_book.length){
                int len=phone1.length();
                //다음번 문자열을 phone1 의 길이만큼 잘라 넣어줌
                String phone2=phone_book[j].substring(0,len);
                if(phone1==phone2){
                    answer=false;
                    break;
                }              
            }
        }
        return answer;
    }
}

-------------------------------------------------
String[] phone_book;
/*
//1.번호 길이 순대로 다시 순서정리
Map<Integer,Integer> map1 = new HashMap();
//폰북 첫번째 부터 길이값 넣어져있는 맵1 만들기
for (int i=0; i++; i<phone_book.length){
	map1.put(i,phone_book[i].length());
}
//맵1을 바탕으로 폰북순서 다시 정렬
*/

//1.번호 길이 순대로 다시 순서정리 (String 배열, 문자열 길이 순서로 정렬(Sorting))
Arrays.sort(phone_book, (s1, s2) -> s1.length() - s2.length());

//2.해쉬에 첫번째 값부터 매핑
Map<Integer,String> map2 =new HashMap();
for (int i=0; i++; i<phone_book.length){
	map2.put(i,phone_book[i]);
}
//3.루프 : 해쉬첫번째 부터 마지막까지 비교
for